// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travel_Company.WPF.Models;

#nullable disable

namespace Travel_Company.WPF.Migrations
{
    [DbContext(typeof(TravelCompanyDbContext))]
    [Migration("20231013162438_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Travel_Company.WPF.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("date")
                        .HasColumnName("passport_issue_date");

                    b.Property<string>("PassportIssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("passport_issuing_authority");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("passport_number");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("passport_series");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("patronymic");

                    b.Property<byte[]>("Photograph")
                        .HasColumnType("image")
                        .HasColumnName("photograph");

                    b.Property<long>("StreetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("street_id");

                    b.Property<long>("TouristGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tourist_group_id");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.HasIndex("TouristGroupId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("class");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Hotel", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Penalty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ClientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("client_id");

                    b.Property<decimal>("CompensationAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("compensation_amount");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tour_guide_id");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("Penalty", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.PopulatedPlace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PopulatedPlace", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("cost");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("EndDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_datetime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Route", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.RoutesPopulatedPlace", b =>
                {
                    b.Property<long>("RouteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("route_id");

                    b.Property<long>("PopulatedPlaceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("populated_place_id");

                    b.Property<string>("ExcursionProgram")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("excursion_program");

                    b.Property<int>("HotelId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("hotel_id");

                    b.Property<DateTime>("StayEndDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("stay_end_datetime");

                    b.Property<DateTime>("StayStartDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("stay_start_datetime");

                    b.HasKey("RouteId", "PopulatedPlaceId");

                    b.HasIndex("HotelId");

                    b.HasIndex("PopulatedPlaceId");

                    b.ToTable("RoutesPopulatedPlaces");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Street", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.TourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<DateTime?>("FiredDate")
                        .HasColumnType("date")
                        .HasColumnName("fired_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsFired")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_fired");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("patronymic");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("salary");

                    b.Property<long>("StreetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("street_id");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("TourGuide", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.TouristGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("RouteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("route_id");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tour_guide_id");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TouristGroup", (string)null);
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Client", b =>
                {
                    b.HasOne("Travel_Company.WPF.Models.Street", "Street")
                        .WithMany("Clients")
                        .HasForeignKey("StreetId")
                        .IsRequired()
                        .HasConstraintName("FK_Client_Street");

                    b.HasOne("Travel_Company.WPF.Models.TouristGroup", "TouristGroup")
                        .WithMany("Clients")
                        .HasForeignKey("TouristGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Client_TouristGroup");

                    b.Navigation("Street");

                    b.Navigation("TouristGroup");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Penalty", b =>
                {
                    b.HasOne("Travel_Company.WPF.Models.Client", "Client")
                        .WithMany("Penalties")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Penalty_Client");

                    b.HasOne("Travel_Company.WPF.Models.TourGuide", "TourGuide")
                        .WithMany("Penalties")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK_Penalty_TourGuide");

                    b.Navigation("Client");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.PopulatedPlace", b =>
                {
                    b.HasOne("Travel_Company.WPF.Models.Country", "Country")
                        .WithMany("PopulatedPlaces")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_PopulatedPlace_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Route", b =>
                {
                    b.HasOne("Travel_Company.WPF.Models.Country", "Country")
                        .WithMany("Routes")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Route_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.RoutesPopulatedPlace", b =>
                {
                    b.HasOne("Travel_Company.WPF.Models.Hotel", "Hotel")
                        .WithMany("RoutesPopulatedPlaces")
                        .HasForeignKey("HotelId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutesPopulatedPlaces_Hotel");

                    b.HasOne("Travel_Company.WPF.Models.PopulatedPlace", "PopulatedPlace")
                        .WithMany("RoutesPopulatedPlaces")
                        .HasForeignKey("PopulatedPlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutesPopulatedPlaces_PopulatedPlace");

                    b.HasOne("Travel_Company.WPF.Models.Route", "Route")
                        .WithMany("RoutesPopulatedPlaces")
                        .HasForeignKey("RouteId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutesPopulatedPlaces_Route");

                    b.Navigation("Hotel");

                    b.Navigation("PopulatedPlace");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.TourGuide", b =>
                {
                    b.HasOne("Travel_Company.WPF.Models.Street", "Street")
                        .WithMany("TourGuides")
                        .HasForeignKey("StreetId")
                        .IsRequired()
                        .HasConstraintName("FK_TourGuide_Street");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.TouristGroup", b =>
                {
                    b.HasOne("Travel_Company.WPF.Models.Route", "Route")
                        .WithMany("TouristGroups")
                        .HasForeignKey("RouteId")
                        .IsRequired()
                        .HasConstraintName("FK_TouristGroup_Route");

                    b.HasOne("Travel_Company.WPF.Models.TourGuide", "TourGuide")
                        .WithMany("TouristGroups")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK_TouristGroup_TourGuide");

                    b.Navigation("Route");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Client", b =>
                {
                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Country", b =>
                {
                    b.Navigation("PopulatedPlaces");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Hotel", b =>
                {
                    b.Navigation("RoutesPopulatedPlaces");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.PopulatedPlace", b =>
                {
                    b.Navigation("RoutesPopulatedPlaces");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Route", b =>
                {
                    b.Navigation("RoutesPopulatedPlaces");

                    b.Navigation("TouristGroups");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.Street", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("TourGuides");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.TourGuide", b =>
                {
                    b.Navigation("Penalties");

                    b.Navigation("TouristGroups");
                });

            modelBuilder.Entity("Travel_Company.WPF.Models.TouristGroup", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
